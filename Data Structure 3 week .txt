Data Structure 3 week 
---------------------
=> 2D array and 3D array :{ 2 D array have 2 dimension height and width but 3 D array have 3 dimension inner planets array of array    }
=> multi-dimensional array === 3D array 
=> Jagged array :{the jagged array is the array tha have diffrent size of elements stored and diffrent lenth }



Tree Data Structure 
-------------------
* A tree is a hierarchical data structure that consists of nodes connected by edges 

=> Thinge are watch out when you having a Teree
 * don't do connect the leaf node to root node  
 * don't do create the node with 2 parents 
 * don't have a tree without a connection 

=> siblings node the node with same parents

=> tree data structure traversing methods or typedfghjk
  -> In order { 1,2,3} first left and root and right        
  -> pre order {2,1,3} first root ,left,right
  -> post order {1,3,2} first left ,right ,root

=> tree traversing complexity O(n) 
=-> space complexity is O(n),O(h)='heigth ' O(d)='depth '

=> Binary Tree & Ternary Tree & K-Array
   ------------------------------------
 * Parent Node with 2 child nodes also called Binary tree 
 * parent Node with more than 2 nodes also called ternary tree
 ->{its also known as K-Arrays } include full tree 

=> property of each tree
 * when happening we are calling that tree with appropriate name 
=> unbalenced tree  and balenced tree 
 * that contain like a linked list but that also satisfing the condetions  of Binary te
 -> BST  
    ----
* binary search tree its very eficiant method {when we are pusting a value to tree that will check the value greater than or lesthan with parent node and it just save it right when element is gretertan parent node or save it in beyond }



* the complexity of BTS 
{ //

insertion Time:O(log(n))   space:  we want to check with 2 scinario for finding space complexity { iterative and recursive : itrative O(1) 
  better than recursive  O(n)}
delete    Time:O(log(n))   space:same 
unbalenced tree : space complexity : O(n)
=> binary heap is a data structure it is like binary tree in which every node has at most two children at ahe most

*  binary heaps are a standard way of executing prioity queues  
-> it was organized by JWJ Willisaams in 1964
}

 -> HEAPS when talkig about heaps we whant to discus about the ={
    * complete tree { it whant to ensure the nodes are containing each level full filled exept last level & incase have in last node that node should countaing from left side   }
    * full tree  ===full binary tree { it represet each node contain exactly 2 node not one or treee {in binary case }}
    * perfect tree === full perfect tree it should not exictig uncompleted nodes 
    
}


=> heapifiying the nodes have a advantages in the property 
=> first swaping 


 -> TRIES 
----------

-> first node will be #  

* The trie is the storing the string in a tree that is the method of tries 

=> the complexity of that word with each word O(l*n)same with time and space
=> avasaanipikkumbol # idanam 

-> so we want to set complexity of bouth are same O(l)
-> search and deletion and insertion  => {O(l)}
-> usage of trie { google il suggetion varunnath nammal search cheyyunnath }
-> trie collition vannal hash table 

-> prefix tree  and sufix tree 
------------------------------

=> suffix is started from end => like faiz={faiz,aiz,iz,z }
=> preffix is started from first => like faiz{faiz,fai,fa,f}
=> child etra varumenn parayan patilla so we wand to ensuer the nodes is the parent element 
=> and we want to create a hashtable for solve this 
 












=> Heaps
  ------

=> the heaps is the other daype of data based on tree data structre that is the complete binary tree 
=> Heapify complexity  => O(n)
=> creating a heap => n(logn)

=> Heaps are 2 types {min heap ,max heap}
  * the heaps alghorithm its storing values like array type and min heap is should root node also the smallest value
  * the max heaps should root node also have the largest value in that binary complete tree 

=> how to find child node and parent node in heaps 
   
   child :{ left : index * 2+1 and right: index * 2+2} this method can apply bouth ds 
   parent :{ (i-1/2)} bouth
=> oru heap create cheyyan O(n) complexity aanu
=> oru shift down complexity is log(n)
=> complexity of heaps 
  * insertion Time : O(log(n)) space: O(1) it comparing with other element when inserting as value greater or not 
  * deletion Time :O(log(n)) space : O(1) it can delete only root node and it is swaping till satsfiing the heap condition 
  * creation of heaps complexity : {we want to check all elements so the Time : O(n) space O(1) becase we have all redy array }


=> the queue is actualy fifo mehtod but the prioryty queue do not take strictly the fifo
* the elements have priority that will be inserted and deleted with priority 

=> priority queue complextiy 
------------------------

delete and insert in array method => O(n)
* then if you want a larger number priority you can take the max heap else you take the min heap 
=> one element which inserted and delete  with log(n) complexity 


=> build heap and heapefiy

Heap Sort complexity 
--------------------
 Time => O(log n)
space => O(1) geven array

depth search => its a searchig like neeelathil 
breath search => its serchign like veethiyil 


-> avl and redancle and red black treees  {another tree types }

=> thats will be selfe balenced and we are 









Graph Data Structure 
--------------------
=> The graph is the non-linear data structre is the sequence of connected nodes and 
-> we can traverce with 2 direction in graph we use a single line thaat is {bie directional and unidirectional }
=> tree are the speciphic type of graph data strucutre
=> ciyclic graph and non ciyclic graph 
=> disconected graph =>{oru connection illatha graph aanu empded graph }

graph are to type {

-> directed and undirected 
--------------------------
* A graph in which the edges have a direction that is the directed graph 
* A greph in which the edges have two direction that is the undircted geraph  so we can traverce a->b->c and c->b->a 
}

 => graphile node kalke nammal parayuka vertex ennanu
=> connection ulla thine edge enn parayum  
=> vertices is the a graph without edges 

=> multiple edges {it will has multiple edges but not cycle and not full filled }
=> cycle graph {a->b->c and c to a that is the cycle of the graph }
=> self loop on a graph => a vertex will have 

* usage of the graph data structure 
------------------------------------

 {the google map & social media and instagram and facebook  will give the mutual friends in firends list }

graph representation 
--------------------
* adjacency Matrix and adjecency list 
=> An adjacency matrix is a 2D array of size V*V v is the the number of vertices in the graph 
=> Each row and column represent a vertex 
=> we want represent matrix i and j 
=> so this is like nested array 

adjecency list 
-------------
=> in this case the vertices are stred like like a map and every vertex stores a list of its adjacent vertices
map pole
=> adjacency list all method complexity is O(1) exept delete that depent on your vertices 

pros & cons a adjacency matrix and list 
---------------------------------------
 {
* when we sotoring a value to adjeceitve list is more efficient because we matrix we want represent with 0,1 value so that will take more memmory space 
* and the list inserting and findign and will taking constent complexity but matrix O(n )  
* the list we can store the datas additionally with an the edge but the matrix will take storecd edxternsally 
}



* DFS & BFS 
  ---------

Dfs => isthe algorithm starts at the root node and that will explore as far as possible along each brach before backtracking 
it will visit first left branch and to right like this 

#-> Math.abs = return the absolut value in js

Bfs === level order ? in tree and graph ?


=> Both are traversal algorithms commony applied ot graph and tree data structures there isn"t an single data streucture that is simulated by both Dfs and bfaa rather tha 

Set method in Js
----------------

=> set method a object type data type that will store the uniqe value like in object and return 
=> set add and set has() add cheyyan and add cheythat find cheyan has return cheyyunnath boolinan aanu 











